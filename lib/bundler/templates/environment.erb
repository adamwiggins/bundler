# DO NOT MODIFY THIS FILE
module Bundler
  dir = File.dirname(__FILE__)

<% unless options[:system_gems] -%>
  ENV["GEM_HOME"] = dir
  ENV["GEM_PATH"] = dir
<% end -%>
  ENV["PATH"]     = "#{dir}/<%= bindir %>:#{ENV["PATH"]}"
  ENV["RUBYOPT"]  = "-r#{__FILE__} #{ENV["RUBYOPT"]}"

<% load_paths.each do |load_path| -%>
  $LOAD_PATH.unshift File.expand_path("#{dir}/<%= load_path %>")
<% end -%>

  @gemfile = "#{dir}/<%= filename %>"

<% if options[:rubygems] -%>
  require "rubygems"

  @bundled_specs = {}
<% spec_files.each do |name, path| -%>
  @bundled_specs["<%= name %>"] = eval(File.read("#{dir}/<%= path %>"))
  @bundled_specs["<%= name %>"].loaded_from = "#{dir}/<%= path %>"
<% end -%>

  def self.add_specs_to_loaded_specs
    Gem.loaded_specs.merge! @bundled_specs
  end

  def self.add_specs_to_index
    @bundled_specs.each do |name, spec|
      Gem.source_index.add_spec spec
    end
  end

  add_specs_to_loaded_specs
  add_specs_to_index
<% end -%>

  def self.require_env(env = nil)
    context = Class.new do
      def initialize(env) @env = env ; end
      def method_missing(*) ; end
      def gem(name, *args)
        opt = args.last || {}
        only = opt[:only] || opt["only"]
        except = opt[:except] || opt["except"]
        files = opt[:require_as] || opt["require_as"] || name

        return unless !only || [only].flatten.any? {|e| e.to_s == @env }
        return if except && [except].flatten.any? {|e| e.to_s == @env }

        files.each { |f| require f }
        yield if block_given?
        true
      end
    end
    context.new(env && env.to_s).instance_eval(File.read(@gemfile))
  end
end

<% if options[:rubygems] -%>
module Gem
  def source_index.refresh!
    super
    Bundler.add_specs_to_index
  end
end
<% else -%>
$" << "rubygems.rb"

module Kernel
  def gem(*)
    # Silently ignore calls to gem, since, in theory, everything
    # is activated correctly already.
  end
end

# Define all the Gem errors for gems that reference them.
module Gem
  def self.ruby ; <%= Gem.ruby.inspect %> ; end
  class LoadError < ::LoadError; end
  class Exception < RuntimeError; end
  class CommandLineError < Exception; end
  class DependencyError < Exception; end
  class DependencyRemovalException < Exception; end
  class GemNotInHomeException < Exception ; end
  class DocumentError < Exception; end
  class EndOfYAMLException < Exception; end
  class FilePermissionError < Exception; end
  class FormatException < Exception; end
  class GemNotFoundException < Exception; end
  class InstallError < Exception; end
  class InvalidSpecificationException < Exception; end
  class OperationNotSupportedError < Exception; end
  class RemoteError < Exception; end
  class RemoteInstallationCancelled < Exception; end
  class RemoteInstallationSkipped < Exception; end
  class RemoteSourceException < Exception; end
  class VerificationError < Exception; end
  class SystemExitException < SystemExit; end
end
<% end -%>